// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  username      String?       @unique
  accounts      Account[]
  sessions      Session[]
  tweets        Tweet[]
  likes         LikeTweet[]
  comments      Comment[]
  likeComments  LikeComment[]
  bookmarks     Bookmark[]

  followedBy Follows[] @relation("following")
  following  Follows[] @relation("follower")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tweet {
  id        String      @id @default(cuid())
  text      String
  createdAt DateTime    @default(now())
  likes     LikeTweet[]
  comments  Comment[]
  bookmarks Bookmark[]

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model LikeTweet {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  tweet   Tweet  @relation(fields: [tweetId], references: [id])
  tweetId String

  @@id([userId, tweetId])
}

model LikeComment {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int

  @@id([userId, commentId])
}

model Comment {
  id        Int           @id @default(autoincrement())
  text      String
  createdAt DateTime      @default(now())
  likes     LikeComment[]

  tweet   Tweet  @relation(fields: [tweetId], references: [id])
  tweetId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String
}

model Bookmark {
  id Int @id @default(autoincrement())

  user    User   @relation(fields: [userId], references: [id])
  userId  String
  tweet   Tweet  @relation(fields: [tweetId], references: [id])
  tweetId String
}

model Follows {
  followerId  String
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followingId String
  following   User   @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}
